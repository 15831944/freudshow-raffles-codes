//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DetailInfo.Report {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectPipeProgressDs")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectPipeProgressDs : System.Data.DataSet {
        
        private ProjectPipeProgressDataTable tableProjectPipeProgress;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectPipeProgressDs() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectPipeProgressDs(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProjectPipeProgress"] != null)) {
                    base.Tables.Add(new ProjectPipeProgressDataTable(ds.Tables["ProjectPipeProgress"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectPipeProgressDataTable ProjectPipeProgress {
            get {
                return this.tableProjectPipeProgress;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ProjectPipeProgressDs cln = ((ProjectPipeProgressDs)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProjectPipeProgress"] != null)) {
                    base.Tables.Add(new ProjectPipeProgressDataTable(ds.Tables["ProjectPipeProgress"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProjectPipeProgress = ((ProjectPipeProgressDataTable)(base.Tables["ProjectPipeProgress"]));
            if ((initTable == true)) {
                if ((this.tableProjectPipeProgress != null)) {
                    this.tableProjectPipeProgress.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectPipeProgressDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectPipeProgressDs.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProjectPipeProgress = new ProjectPipeProgressDataTable();
            base.Tables.Add(this.tableProjectPipeProgress);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectPipeProgress() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ProjectPipeProgressDs ds = new ProjectPipeProgressDs();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ProjectPipeProgressRowChangeEventHandler(object sender, ProjectPipeProgressRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectPipeProgressDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsysid;
            
            private System.Data.DataColumn columnsysname;
            
            private System.Data.DataColumn columninit_count;
            
            private System.Data.DataColumn columnapproving_count;
            
            private System.Data.DataColumn columnapproved_count;
            
            private System.Data.DataColumn columnassigning_count;
            
            private System.Data.DataColumn columnprocessing_count;
            
            private System.Data.DataColumn columnfeedback_count;
            
            private System.Data.DataColumn columnfeedbackd_count;
            
            private System.Data.DataColumn columntesting_count;
            
            private System.Data.DataColumn columndealdesign_count;
            
            private System.Data.DataColumn columnapfeedback_count;
            
            private System.Data.DataColumn columnfailure_count;
            
            private System.Data.DataColumn columnwset_count;
            
            private System.Data.DataColumn columnseting_count;
            
            private System.Data.DataColumn columnwdebug_count;
            
            private System.Data.DataColumn columndebuged_count;
            
            private System.Data.DataColumn columndebugfail_count;
            
            private System.Data.DataColumn columnsum_count;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressDataTable() {
                this.TableName = "ProjectPipeProgress";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectPipeProgressDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectPipeProgressDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysidColumn {
                get {
                    return this.columnsysid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysnameColumn {
                get {
                    return this.columnsysname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn init_countColumn {
                get {
                    return this.columninit_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn approving_countColumn {
                get {
                    return this.columnapproving_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn approved_countColumn {
                get {
                    return this.columnapproved_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn assigning_countColumn {
                get {
                    return this.columnassigning_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn processing_countColumn {
                get {
                    return this.columnprocessing_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn feedback_countColumn {
                get {
                    return this.columnfeedback_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn feedbackd_countColumn {
                get {
                    return this.columnfeedbackd_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn testing_countColumn {
                get {
                    return this.columntesting_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dealdesign_countColumn {
                get {
                    return this.columndealdesign_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn apfeedback_countColumn {
                get {
                    return this.columnapfeedback_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn failure_countColumn {
                get {
                    return this.columnfailure_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn wset_countColumn {
                get {
                    return this.columnwset_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn seting_countColumn {
                get {
                    return this.columnseting_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn wdebug_countColumn {
                get {
                    return this.columnwdebug_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn debuged_countColumn {
                get {
                    return this.columndebuged_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn debugfail_countColumn {
                get {
                    return this.columndebugfail_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sum_countColumn {
                get {
                    return this.columnsum_count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressRow this[int index] {
                get {
                    return ((ProjectPipeProgressRow)(this.Rows[index]));
                }
            }
            
            public event ProjectPipeProgressRowChangeEventHandler ProjectPipeProgressRowChanging;
            
            public event ProjectPipeProgressRowChangeEventHandler ProjectPipeProgressRowChanged;
            
            public event ProjectPipeProgressRowChangeEventHandler ProjectPipeProgressRowDeleting;
            
            public event ProjectPipeProgressRowChangeEventHandler ProjectPipeProgressRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectPipeProgressRow(ProjectPipeProgressRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressRow AddProjectPipeProgressRow(
                        string sysid, 
                        string sysname, 
                        int init_count, 
                        int approving_count, 
                        int approved_count, 
                        int assigning_count, 
                        int processing_count, 
                        int feedback_count, 
                        int feedbackd_count, 
                        int testing_count, 
                        int dealdesign_count, 
                        int apfeedback_count, 
                        int failure_count, 
                        int wset_count, 
                        int seting_count, 
                        int wdebug_count, 
                        int debuged_count, 
                        int debugfail_count, 
                        int sum_count) {
                ProjectPipeProgressRow rowProjectPipeProgressRow = ((ProjectPipeProgressRow)(this.NewRow()));
                rowProjectPipeProgressRow.ItemArray = new object[] {
                        sysid,
                        sysname,
                        init_count,
                        approving_count,
                        approved_count,
                        assigning_count,
                        processing_count,
                        feedback_count,
                        feedbackd_count,
                        testing_count,
                        dealdesign_count,
                        apfeedback_count,
                        failure_count,
                        wset_count,
                        seting_count,
                        wdebug_count,
                        debuged_count,
                        debugfail_count,
                        sum_count};
                this.Rows.Add(rowProjectPipeProgressRow);
                return rowProjectPipeProgressRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProjectPipeProgressDataTable cln = ((ProjectPipeProgressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProjectPipeProgressDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsysid = base.Columns["sysid"];
                this.columnsysname = base.Columns["sysname"];
                this.columninit_count = base.Columns["init_count"];
                this.columnapproving_count = base.Columns["approving_count"];
                this.columnapproved_count = base.Columns["approved_count"];
                this.columnassigning_count = base.Columns["assigning_count"];
                this.columnprocessing_count = base.Columns["processing_count"];
                this.columnfeedback_count = base.Columns["feedback_count"];
                this.columnfeedbackd_count = base.Columns["feedbackd_count"];
                this.columntesting_count = base.Columns["testing_count"];
                this.columndealdesign_count = base.Columns["dealdesign_count"];
                this.columnapfeedback_count = base.Columns["apfeedback_count"];
                this.columnfailure_count = base.Columns["failure_count"];
                this.columnwset_count = base.Columns["wset_count"];
                this.columnseting_count = base.Columns["seting_count"];
                this.columnwdebug_count = base.Columns["wdebug_count"];
                this.columndebuged_count = base.Columns["debuged_count"];
                this.columndebugfail_count = base.Columns["debugfail_count"];
                this.columnsum_count = base.Columns["sum_count"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsysid = new System.Data.DataColumn("sysid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysid);
                this.columnsysname = new System.Data.DataColumn("sysname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysname);
                this.columninit_count = new System.Data.DataColumn("init_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninit_count);
                this.columnapproving_count = new System.Data.DataColumn("approving_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapproving_count);
                this.columnapproved_count = new System.Data.DataColumn("approved_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapproved_count);
                this.columnassigning_count = new System.Data.DataColumn("assigning_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnassigning_count);
                this.columnprocessing_count = new System.Data.DataColumn("processing_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocessing_count);
                this.columnfeedback_count = new System.Data.DataColumn("feedback_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfeedback_count);
                this.columnfeedbackd_count = new System.Data.DataColumn("feedbackd_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfeedbackd_count);
                this.columntesting_count = new System.Data.DataColumn("testing_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntesting_count);
                this.columndealdesign_count = new System.Data.DataColumn("dealdesign_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndealdesign_count);
                this.columnapfeedback_count = new System.Data.DataColumn("apfeedback_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapfeedback_count);
                this.columnfailure_count = new System.Data.DataColumn("failure_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfailure_count);
                this.columnwset_count = new System.Data.DataColumn("wset_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwset_count);
                this.columnseting_count = new System.Data.DataColumn("seting_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnseting_count);
                this.columnwdebug_count = new System.Data.DataColumn("wdebug_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnwdebug_count);
                this.columndebuged_count = new System.Data.DataColumn("debuged_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndebuged_count);
                this.columndebugfail_count = new System.Data.DataColumn("debugfail_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndebugfail_count);
                this.columnsum_count = new System.Data.DataColumn("sum_count", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum_count);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressRow NewProjectPipeProgressRow() {
                return ((ProjectPipeProgressRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProjectPipeProgressRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProjectPipeProgressRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectPipeProgressRowChanged != null)) {
                    this.ProjectPipeProgressRowChanged(this, new ProjectPipeProgressRowChangeEvent(((ProjectPipeProgressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectPipeProgressRowChanging != null)) {
                    this.ProjectPipeProgressRowChanging(this, new ProjectPipeProgressRowChangeEvent(((ProjectPipeProgressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectPipeProgressRowDeleted != null)) {
                    this.ProjectPipeProgressRowDeleted(this, new ProjectPipeProgressRowChangeEvent(((ProjectPipeProgressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectPipeProgressRowDeleting != null)) {
                    this.ProjectPipeProgressRowDeleting(this, new ProjectPipeProgressRowChangeEvent(((ProjectPipeProgressRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectPipeProgressRow(ProjectPipeProgressRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProjectPipeProgressDs ds = new ProjectPipeProgressDs();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectPipeProgressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectPipeProgressRow : System.Data.DataRow {
            
            private ProjectPipeProgressDataTable tableProjectPipeProgress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectPipeProgressRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectPipeProgress = ((ProjectPipeProgressDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysid {
                get {
                    try {
                        return ((string)(this[this.tableProjectPipeProgress.sysidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“sysid”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.sysidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysname {
                get {
                    try {
                        return ((string)(this[this.tableProjectPipeProgress.sysnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“sysname”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.sysnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int init_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.init_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“init_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.init_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int approving_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.approving_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“approving_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.approving_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int approved_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.approved_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“approved_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.approved_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int assigning_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.assigning_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“assigning_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.assigning_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int processing_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.processing_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“processing_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.processing_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int feedback_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.feedback_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“feedback_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.feedback_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int feedbackd_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.feedbackd_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“feedbackd_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.feedbackd_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int testing_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.testing_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“testing_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.testing_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dealdesign_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.dealdesign_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“dealdesign_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.dealdesign_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apfeedback_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.apfeedback_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“apfeedback_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.apfeedback_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int failure_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.failure_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“failure_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.failure_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int wset_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.wset_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“wset_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.wset_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int seting_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.seting_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“seting_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.seting_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int wdebug_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.wdebug_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“wdebug_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.wdebug_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int debuged_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.debuged_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“debuged_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.debuged_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int debugfail_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.debugfail_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“debugfail_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.debugfail_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sum_count {
                get {
                    try {
                        return ((int)(this[this.tableProjectPipeProgress.sum_countColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“ProjectPipeProgress”中列“sum_count”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableProjectPipeProgress.sum_countColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssysidNull() {
                return this.IsNull(this.tableProjectPipeProgress.sysidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsysidNull() {
                this[this.tableProjectPipeProgress.sysidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssysnameNull() {
                return this.IsNull(this.tableProjectPipeProgress.sysnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsysnameNull() {
                this[this.tableProjectPipeProgress.sysnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinit_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.init_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinit_countNull() {
                this[this.tableProjectPipeProgress.init_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isapproving_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.approving_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setapproving_countNull() {
                this[this.tableProjectPipeProgress.approving_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isapproved_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.approved_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setapproved_countNull() {
                this[this.tableProjectPipeProgress.approved_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassigning_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.assigning_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassigning_countNull() {
                this[this.tableProjectPipeProgress.assigning_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocessing_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.processing_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocessing_countNull() {
                this[this.tableProjectPipeProgress.processing_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfeedback_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.feedback_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfeedback_countNull() {
                this[this.tableProjectPipeProgress.feedback_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfeedbackd_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.feedbackd_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfeedbackd_countNull() {
                this[this.tableProjectPipeProgress.feedbackd_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istesting_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.testing_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settesting_countNull() {
                this[this.tableProjectPipeProgress.testing_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdealdesign_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.dealdesign_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdealdesign_countNull() {
                this[this.tableProjectPipeProgress.dealdesign_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isapfeedback_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.apfeedback_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setapfeedback_countNull() {
                this[this.tableProjectPipeProgress.apfeedback_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfailure_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.failure_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfailure_countNull() {
                this[this.tableProjectPipeProgress.failure_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswset_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.wset_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwset_countNull() {
                this[this.tableProjectPipeProgress.wset_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseting_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.seting_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseting_countNull() {
                this[this.tableProjectPipeProgress.seting_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iswdebug_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.wdebug_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setwdebug_countNull() {
                this[this.tableProjectPipeProgress.wdebug_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdebuged_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.debuged_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdebuged_countNull() {
                this[this.tableProjectPipeProgress.debuged_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdebugfail_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.debugfail_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdebugfail_countNull() {
                this[this.tableProjectPipeProgress.debugfail_countColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issum_countNull() {
                return this.IsNull(this.tableProjectPipeProgress.sum_countColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsum_countNull() {
                this[this.tableProjectPipeProgress.sum_countColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectPipeProgressRowChangeEvent : System.EventArgs {
            
            private ProjectPipeProgressRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressRowChangeEvent(ProjectPipeProgressRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectPipeProgressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591