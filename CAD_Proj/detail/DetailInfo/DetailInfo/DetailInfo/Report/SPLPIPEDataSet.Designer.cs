//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DetailInfo.Report {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SPLPIPEDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SPLPIPEDataSet : System.Data.DataSet {
        
        private SPLPIPE_TABDataTable tableSPLPIPE_TAB;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPLPIPEDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SPLPIPEDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SPLPIPE_TAB"] != null)) {
                    base.Tables.Add(new SPLPIPE_TABDataTable(ds.Tables["SPLPIPE_TAB"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPLPIPE_TABDataTable SPLPIPE_TAB {
            get {
                return this.tableSPLPIPE_TAB;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SPLPIPEDataSet cln = ((SPLPIPEDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SPLPIPE_TAB"] != null)) {
                    base.Tables.Add(new SPLPIPE_TABDataTable(ds.Tables["SPLPIPE_TAB"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSPLPIPE_TAB = ((SPLPIPE_TABDataTable)(base.Tables["SPLPIPE_TAB"]));
            if ((initTable == true)) {
                if ((this.tableSPLPIPE_TAB != null)) {
                    this.tableSPLPIPE_TAB.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SPLPIPEDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SPLPIPEDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSPLPIPE_TAB = new SPLPIPE_TABDataTable();
            base.Tables.Add(this.tableSPLPIPE_TAB);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPLPIPE_TAB() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SPLPIPEDataSet ds = new SPLPIPEDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void SPLPIPE_TABRowChangeEventHandler(object sender, SPLPIPE_TABRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPLPIPE_TABDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPROJECTID;
            
            private System.Data.DataColumn columnSPOOLNAME;
            
            private System.Data.DataColumn columnDRAWINGNO;
            
            private System.Data.DataColumn columnSYSTEMNAME;
            
            private System.Data.DataColumn columnSYSTEMID;
            
            private System.Data.DataColumn columnBLOCKNO;
            
            private System.Data.DataColumn columnSURFACETREATMENT;
            
            private System.Data.DataColumn columnPIPECHECKFIELD;
            
            private System.Data.DataColumn columnPIPEGRADE;
            
            private System.Data.DataColumn columnPRESSURETESTFIELD;
            
            private System.Data.DataColumn columnSPOOLWEIGHT;
            
            private System.Data.DataColumn columnMATERIAL;
            
            private System.Data.DataColumn columnNORM;
            
            private System.Data.DataColumn columnSURAREA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABDataTable() {
                this.TableName = "SPLPIPE_TAB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPLPIPE_TABDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPLPIPE_TABDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PROJECTIDColumn {
                get {
                    return this.columnPROJECTID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SPOOLNAMEColumn {
                get {
                    return this.columnSPOOLNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DRAWINGNOColumn {
                get {
                    return this.columnDRAWINGNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SYSTEMNAMEColumn {
                get {
                    return this.columnSYSTEMNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SYSTEMIDColumn {
                get {
                    return this.columnSYSTEMID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BLOCKNOColumn {
                get {
                    return this.columnBLOCKNO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SURFACETREATMENTColumn {
                get {
                    return this.columnSURFACETREATMENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PIPECHECKFIELDColumn {
                get {
                    return this.columnPIPECHECKFIELD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PIPEGRADEColumn {
                get {
                    return this.columnPIPEGRADE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRESSURETESTFIELDColumn {
                get {
                    return this.columnPRESSURETESTFIELD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SPOOLWEIGHTColumn {
                get {
                    return this.columnSPOOLWEIGHT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MATERIALColumn {
                get {
                    return this.columnMATERIAL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NORMColumn {
                get {
                    return this.columnNORM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SURAREAColumn {
                get {
                    return this.columnSURAREA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABRow this[int index] {
                get {
                    return ((SPLPIPE_TABRow)(this.Rows[index]));
                }
            }
            
            public event SPLPIPE_TABRowChangeEventHandler SPLPIPE_TABRowChanging;
            
            public event SPLPIPE_TABRowChangeEventHandler SPLPIPE_TABRowChanged;
            
            public event SPLPIPE_TABRowChangeEventHandler SPLPIPE_TABRowDeleting;
            
            public event SPLPIPE_TABRowChangeEventHandler SPLPIPE_TABRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPLPIPE_TABRow(SPLPIPE_TABRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABRow AddSPLPIPE_TABRow(string PROJECTID, string SPOOLNAME, string DRAWINGNO, string SYSTEMNAME, string SYSTEMID, string BLOCKNO, string SURFACETREATMENT, string PIPECHECKFIELD, string PIPEGRADE, string PRESSURETESTFIELD, string SPOOLWEIGHT, string MATERIAL, string NORM, string SURAREA) {
                SPLPIPE_TABRow rowSPLPIPE_TABRow = ((SPLPIPE_TABRow)(this.NewRow()));
                rowSPLPIPE_TABRow.ItemArray = new object[] {
                        PROJECTID,
                        SPOOLNAME,
                        DRAWINGNO,
                        SYSTEMNAME,
                        SYSTEMID,
                        BLOCKNO,
                        SURFACETREATMENT,
                        PIPECHECKFIELD,
                        PIPEGRADE,
                        PRESSURETESTFIELD,
                        SPOOLWEIGHT,
                        MATERIAL,
                        NORM,
                        SURAREA};
                this.Rows.Add(rowSPLPIPE_TABRow);
                return rowSPLPIPE_TABRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPLPIPE_TABDataTable cln = ((SPLPIPE_TABDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPLPIPE_TABDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPROJECTID = base.Columns["PROJECTID"];
                this.columnSPOOLNAME = base.Columns["SPOOLNAME"];
                this.columnDRAWINGNO = base.Columns["DRAWINGNO"];
                this.columnSYSTEMNAME = base.Columns["SYSTEMNAME"];
                this.columnSYSTEMID = base.Columns["SYSTEMID"];
                this.columnBLOCKNO = base.Columns["BLOCKNO"];
                this.columnSURFACETREATMENT = base.Columns["SURFACETREATMENT"];
                this.columnPIPECHECKFIELD = base.Columns["PIPECHECKFIELD"];
                this.columnPIPEGRADE = base.Columns["PIPEGRADE"];
                this.columnPRESSURETESTFIELD = base.Columns["PRESSURETESTFIELD"];
                this.columnSPOOLWEIGHT = base.Columns["SPOOLWEIGHT"];
                this.columnMATERIAL = base.Columns["MATERIAL"];
                this.columnNORM = base.Columns["NORM"];
                this.columnSURAREA = base.Columns["SURAREA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPROJECTID = new System.Data.DataColumn("PROJECTID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROJECTID);
                this.columnSPOOLNAME = new System.Data.DataColumn("SPOOLNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPOOLNAME);
                this.columnDRAWINGNO = new System.Data.DataColumn("DRAWINGNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRAWINGNO);
                this.columnSYSTEMNAME = new System.Data.DataColumn("SYSTEMNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSTEMNAME);
                this.columnSYSTEMID = new System.Data.DataColumn("SYSTEMID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSTEMID);
                this.columnBLOCKNO = new System.Data.DataColumn("BLOCKNO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOCKNO);
                this.columnSURFACETREATMENT = new System.Data.DataColumn("SURFACETREATMENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSURFACETREATMENT);
                this.columnPIPECHECKFIELD = new System.Data.DataColumn("PIPECHECKFIELD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPIPECHECKFIELD);
                this.columnPIPEGRADE = new System.Data.DataColumn("PIPEGRADE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPIPEGRADE);
                this.columnPRESSURETESTFIELD = new System.Data.DataColumn("PRESSURETESTFIELD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRESSURETESTFIELD);
                this.columnSPOOLWEIGHT = new System.Data.DataColumn("SPOOLWEIGHT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPOOLWEIGHT);
                this.columnMATERIAL = new System.Data.DataColumn("MATERIAL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMATERIAL);
                this.columnNORM = new System.Data.DataColumn("NORM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNORM);
                this.columnSURAREA = new System.Data.DataColumn("SURAREA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSURAREA);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABRow NewSPLPIPE_TABRow() {
                return ((SPLPIPE_TABRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPLPIPE_TABRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPLPIPE_TABRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPLPIPE_TABRowChanged != null)) {
                    this.SPLPIPE_TABRowChanged(this, new SPLPIPE_TABRowChangeEvent(((SPLPIPE_TABRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPLPIPE_TABRowChanging != null)) {
                    this.SPLPIPE_TABRowChanging(this, new SPLPIPE_TABRowChangeEvent(((SPLPIPE_TABRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPLPIPE_TABRowDeleted != null)) {
                    this.SPLPIPE_TABRowDeleted(this, new SPLPIPE_TABRowChangeEvent(((SPLPIPE_TABRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPLPIPE_TABRowDeleting != null)) {
                    this.SPLPIPE_TABRowDeleting(this, new SPLPIPE_TABRowChangeEvent(((SPLPIPE_TABRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPLPIPE_TABRow(SPLPIPE_TABRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SPLPIPEDataSet ds = new SPLPIPEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPLPIPE_TABDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPLPIPE_TABRow : System.Data.DataRow {
            
            private SPLPIPE_TABDataTable tableSPLPIPE_TAB;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPLPIPE_TABRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPLPIPE_TAB = ((SPLPIPE_TABDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROJECTID {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.PROJECTIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“PROJECTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.PROJECTIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPOOLNAME {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SPOOLNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SPOOLNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SPOOLNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRAWINGNO {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.DRAWINGNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“DRAWINGNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.DRAWINGNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SYSTEMNAME {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SYSTEMNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SYSTEMNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SYSTEMNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SYSTEMID {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SYSTEMIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SYSTEMID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SYSTEMIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLOCKNO {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.BLOCKNOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“BLOCKNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.BLOCKNOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SURFACETREATMENT {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SURFACETREATMENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SURFACETREATMENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SURFACETREATMENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PIPECHECKFIELD {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.PIPECHECKFIELDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“PIPECHECKFIELD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.PIPECHECKFIELDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PIPEGRADE {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.PIPEGRADEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“PIPEGRADE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.PIPEGRADEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRESSURETESTFIELD {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.PRESSURETESTFIELDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“PRESSURETESTFIELD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.PRESSURETESTFIELDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPOOLWEIGHT {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SPOOLWEIGHTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SPOOLWEIGHT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SPOOLWEIGHTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MATERIAL {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.MATERIALColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“MATERIAL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.MATERIALColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NORM {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.NORMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“NORM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.NORMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SURAREA {
                get {
                    try {
                        return ((string)(this[this.tableSPLPIPE_TAB.SURAREAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“SPLPIPE_TAB”中列“SURAREA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSPLPIPE_TAB.SURAREAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROJECTIDNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.PROJECTIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROJECTIDNull() {
                this[this.tableSPLPIPE_TAB.PROJECTIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPOOLNAMENull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SPOOLNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPOOLNAMENull() {
                this[this.tableSPLPIPE_TAB.SPOOLNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRAWINGNONull() {
                return this.IsNull(this.tableSPLPIPE_TAB.DRAWINGNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRAWINGNONull() {
                this[this.tableSPLPIPE_TAB.DRAWINGNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSYSTEMNAMENull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SYSTEMNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSYSTEMNAMENull() {
                this[this.tableSPLPIPE_TAB.SYSTEMNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSYSTEMIDNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SYSTEMIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSYSTEMIDNull() {
                this[this.tableSPLPIPE_TAB.SYSTEMIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOCKNONull() {
                return this.IsNull(this.tableSPLPIPE_TAB.BLOCKNOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOCKNONull() {
                this[this.tableSPLPIPE_TAB.BLOCKNOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSURFACETREATMENTNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SURFACETREATMENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSURFACETREATMENTNull() {
                this[this.tableSPLPIPE_TAB.SURFACETREATMENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPIPECHECKFIELDNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.PIPECHECKFIELDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPIPECHECKFIELDNull() {
                this[this.tableSPLPIPE_TAB.PIPECHECKFIELDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPIPEGRADENull() {
                return this.IsNull(this.tableSPLPIPE_TAB.PIPEGRADEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPIPEGRADENull() {
                this[this.tableSPLPIPE_TAB.PIPEGRADEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRESSURETESTFIELDNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.PRESSURETESTFIELDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRESSURETESTFIELDNull() {
                this[this.tableSPLPIPE_TAB.PRESSURETESTFIELDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPOOLWEIGHTNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SPOOLWEIGHTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPOOLWEIGHTNull() {
                this[this.tableSPLPIPE_TAB.SPOOLWEIGHTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMATERIALNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.MATERIALColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMATERIALNull() {
                this[this.tableSPLPIPE_TAB.MATERIALColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNORMNull() {
                return this.IsNull(this.tableSPLPIPE_TAB.NORMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNORMNull() {
                this[this.tableSPLPIPE_TAB.NORMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSURAREANull() {
                return this.IsNull(this.tableSPLPIPE_TAB.SURAREAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSURAREANull() {
                this[this.tableSPLPIPE_TAB.SURAREAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPLPIPE_TABRowChangeEvent : System.EventArgs {
            
            private SPLPIPE_TABRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABRowChangeEvent(SPLPIPE_TABRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPLPIPE_TABRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591