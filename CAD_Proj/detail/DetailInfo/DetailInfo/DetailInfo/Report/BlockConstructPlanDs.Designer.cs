//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.3623
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DetailInfo.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BlockConstructPlanDs")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BlockConstructPlanDs : global::System.Data.DataSet {
        
        private BLOCKCONSTRUCTIONPLAN_TABDataTable tableBLOCKCONSTRUCTIONPLAN_TAB;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BlockConstructPlanDs() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BlockConstructPlanDs(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BLOCKCONSTRUCTIONPLAN_TAB"] != null)) {
                    base.Tables.Add(new BLOCKCONSTRUCTIONPLAN_TABDataTable(ds.Tables["BLOCKCONSTRUCTIONPLAN_TAB"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BLOCKCONSTRUCTIONPLAN_TABDataTable BLOCKCONSTRUCTIONPLAN_TAB {
            get {
                return this.tableBLOCKCONSTRUCTIONPLAN_TAB;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BlockConstructPlanDs cln = ((BlockConstructPlanDs)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BLOCKCONSTRUCTIONPLAN_TAB"] != null)) {
                    base.Tables.Add(new BLOCKCONSTRUCTIONPLAN_TABDataTable(ds.Tables["BLOCKCONSTRUCTIONPLAN_TAB"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBLOCKCONSTRUCTIONPLAN_TAB = ((BLOCKCONSTRUCTIONPLAN_TABDataTable)(base.Tables["BLOCKCONSTRUCTIONPLAN_TAB"]));
            if ((initTable == true)) {
                if ((this.tableBLOCKCONSTRUCTIONPLAN_TAB != null)) {
                    this.tableBLOCKCONSTRUCTIONPLAN_TAB.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BlockConstructPlanDs";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BlockConstructPlanDs.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBLOCKCONSTRUCTIONPLAN_TAB = new BLOCKCONSTRUCTIONPLAN_TABDataTable();
            base.Tables.Add(this.tableBLOCKCONSTRUCTIONPLAN_TAB);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBLOCKCONSTRUCTIONPLAN_TAB() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BlockConstructPlanDs ds = new BlockConstructPlanDs();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BLOCKCONSTRUCTIONPLAN_TABRowChangeEventHandler(object sender, BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BLOCKCONSTRUCTIONPLAN_TABDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnPROJECTID;
            
            private global::System.Data.DataColumn columnBLOCKNO;
            
            private global::System.Data.DataColumn columnDRAWINGNO;
            
            private global::System.Data.DataColumn columnPLAN_BLOCK_PRE_START;
            
            private global::System.Data.DataColumn columnPLAN_BLOCK_PRE_FINISH;
            
            private global::System.Data.DataColumn columnACTUAL_BLOCK_PRE_START;
            
            private global::System.Data.DataColumn columnACTUAL_BLOCK_PRE_FINISH;
            
            private global::System.Data.DataColumn columnPLAN_BLOCK_ASS_START;
            
            private global::System.Data.DataColumn columnPLAN_BLOCK_ASS_FINISH;
            
            private global::System.Data.DataColumn columnACTUAL_BLOCK_ASS_START;
            
            private global::System.Data.DataColumn columnACTUAL_BLOCK_ASS_FINISH;
            
            private global::System.Data.DataColumn columnPREPAREDBY;
            
            private global::System.Data.DataColumn columnPREPAREDATE;
            
            private global::System.Data.DataColumn columnREMARK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABDataTable() {
                this.TableName = "BLOCKCONSTRUCTIONPLAN_TAB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BLOCKCONSTRUCTIONPLAN_TABDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BLOCKCONSTRUCTIONPLAN_TABDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROJECTIDColumn {
                get {
                    return this.columnPROJECTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLOCKNOColumn {
                get {
                    return this.columnBLOCKNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRAWINGNOColumn {
                get {
                    return this.columnDRAWINGNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_BLOCK_PRE_STARTColumn {
                get {
                    return this.columnPLAN_BLOCK_PRE_START;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_BLOCK_PRE_FINISHColumn {
                get {
                    return this.columnPLAN_BLOCK_PRE_FINISH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTUAL_BLOCK_PRE_STARTColumn {
                get {
                    return this.columnACTUAL_BLOCK_PRE_START;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTUAL_BLOCK_PRE_FINISHColumn {
                get {
                    return this.columnACTUAL_BLOCK_PRE_FINISH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_BLOCK_ASS_STARTColumn {
                get {
                    return this.columnPLAN_BLOCK_ASS_START;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PLAN_BLOCK_ASS_FINISHColumn {
                get {
                    return this.columnPLAN_BLOCK_ASS_FINISH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTUAL_BLOCK_ASS_STARTColumn {
                get {
                    return this.columnACTUAL_BLOCK_ASS_START;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTUAL_BLOCK_ASS_FINISHColumn {
                get {
                    return this.columnACTUAL_BLOCK_ASS_FINISH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAREDBYColumn {
                get {
                    return this.columnPREPAREDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAREDATEColumn {
                get {
                    return this.columnPREPAREDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMARKColumn {
                get {
                    return this.columnREMARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRow this[int index] {
                get {
                    return ((BLOCKCONSTRUCTIONPLAN_TABRow)(this.Rows[index]));
                }
            }
            
            public event BLOCKCONSTRUCTIONPLAN_TABRowChangeEventHandler BLOCKCONSTRUCTIONPLAN_TABRowChanging;
            
            public event BLOCKCONSTRUCTIONPLAN_TABRowChangeEventHandler BLOCKCONSTRUCTIONPLAN_TABRowChanged;
            
            public event BLOCKCONSTRUCTIONPLAN_TABRowChangeEventHandler BLOCKCONSTRUCTIONPLAN_TABRowDeleting;
            
            public event BLOCKCONSTRUCTIONPLAN_TABRowChangeEventHandler BLOCKCONSTRUCTIONPLAN_TABRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBLOCKCONSTRUCTIONPLAN_TABRow(BLOCKCONSTRUCTIONPLAN_TABRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRow AddBLOCKCONSTRUCTIONPLAN_TABRow(decimal ID, string PROJECTID, string BLOCKNO, string DRAWINGNO, System.DateTime PLAN_BLOCK_PRE_START, System.DateTime PLAN_BLOCK_PRE_FINISH, System.DateTime ACTUAL_BLOCK_PRE_START, System.DateTime ACTUAL_BLOCK_PRE_FINISH, System.DateTime PLAN_BLOCK_ASS_START, System.DateTime PLAN_BLOCK_ASS_FINISH, System.DateTime ACTUAL_BLOCK_ASS_START, System.DateTime ACTUAL_BLOCK_ASS_FINISH, string PREPAREDBY, System.DateTime PREPAREDATE, string REMARK) {
                BLOCKCONSTRUCTIONPLAN_TABRow rowBLOCKCONSTRUCTIONPLAN_TABRow = ((BLOCKCONSTRUCTIONPLAN_TABRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        PROJECTID,
                        BLOCKNO,
                        DRAWINGNO,
                        PLAN_BLOCK_PRE_START,
                        PLAN_BLOCK_PRE_FINISH,
                        ACTUAL_BLOCK_PRE_START,
                        ACTUAL_BLOCK_PRE_FINISH,
                        PLAN_BLOCK_ASS_START,
                        PLAN_BLOCK_ASS_FINISH,
                        ACTUAL_BLOCK_ASS_START,
                        ACTUAL_BLOCK_ASS_FINISH,
                        PREPAREDBY,
                        PREPAREDATE,
                        REMARK};
                rowBLOCKCONSTRUCTIONPLAN_TABRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBLOCKCONSTRUCTIONPLAN_TABRow);
                return rowBLOCKCONSTRUCTIONPLAN_TABRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRow FindByID(decimal ID) {
                return ((BLOCKCONSTRUCTIONPLAN_TABRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BLOCKCONSTRUCTIONPLAN_TABDataTable cln = ((BLOCKCONSTRUCTIONPLAN_TABDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BLOCKCONSTRUCTIONPLAN_TABDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPROJECTID = base.Columns["PROJECTID"];
                this.columnBLOCKNO = base.Columns["BLOCKNO"];
                this.columnDRAWINGNO = base.Columns["DRAWINGNO"];
                this.columnPLAN_BLOCK_PRE_START = base.Columns["PLAN_BLOCK_PRE_START"];
                this.columnPLAN_BLOCK_PRE_FINISH = base.Columns["PLAN_BLOCK_PRE_FINISH"];
                this.columnACTUAL_BLOCK_PRE_START = base.Columns["ACTUAL_BLOCK_PRE_START"];
                this.columnACTUAL_BLOCK_PRE_FINISH = base.Columns["ACTUAL_BLOCK_PRE_FINISH"];
                this.columnPLAN_BLOCK_ASS_START = base.Columns["PLAN_BLOCK_ASS_START"];
                this.columnPLAN_BLOCK_ASS_FINISH = base.Columns["PLAN_BLOCK_ASS_FINISH"];
                this.columnACTUAL_BLOCK_ASS_START = base.Columns["ACTUAL_BLOCK_ASS_START"];
                this.columnACTUAL_BLOCK_ASS_FINISH = base.Columns["ACTUAL_BLOCK_ASS_FINISH"];
                this.columnPREPAREDBY = base.Columns["PREPAREDBY"];
                this.columnPREPAREDATE = base.Columns["PREPAREDATE"];
                this.columnREMARK = base.Columns["REMARK"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPROJECTID = new global::System.Data.DataColumn("PROJECTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROJECTID);
                this.columnBLOCKNO = new global::System.Data.DataColumn("BLOCKNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOCKNO);
                this.columnDRAWINGNO = new global::System.Data.DataColumn("DRAWINGNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRAWINGNO);
                this.columnPLAN_BLOCK_PRE_START = new global::System.Data.DataColumn("PLAN_BLOCK_PRE_START", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_BLOCK_PRE_START);
                this.columnPLAN_BLOCK_PRE_FINISH = new global::System.Data.DataColumn("PLAN_BLOCK_PRE_FINISH", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_BLOCK_PRE_FINISH);
                this.columnACTUAL_BLOCK_PRE_START = new global::System.Data.DataColumn("ACTUAL_BLOCK_PRE_START", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUAL_BLOCK_PRE_START);
                this.columnACTUAL_BLOCK_PRE_FINISH = new global::System.Data.DataColumn("ACTUAL_BLOCK_PRE_FINISH", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUAL_BLOCK_PRE_FINISH);
                this.columnPLAN_BLOCK_ASS_START = new global::System.Data.DataColumn("PLAN_BLOCK_ASS_START", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_BLOCK_ASS_START);
                this.columnPLAN_BLOCK_ASS_FINISH = new global::System.Data.DataColumn("PLAN_BLOCK_ASS_FINISH", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLAN_BLOCK_ASS_FINISH);
                this.columnACTUAL_BLOCK_ASS_START = new global::System.Data.DataColumn("ACTUAL_BLOCK_ASS_START", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUAL_BLOCK_ASS_START);
                this.columnACTUAL_BLOCK_ASS_FINISH = new global::System.Data.DataColumn("ACTUAL_BLOCK_ASS_FINISH", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUAL_BLOCK_ASS_FINISH);
                this.columnPREPAREDBY = new global::System.Data.DataColumn("PREPAREDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAREDBY);
                this.columnPREPAREDATE = new global::System.Data.DataColumn("PREPAREDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAREDATE);
                this.columnREMARK = new global::System.Data.DataColumn("REMARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMARK);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnPROJECTID.MaxLength = 30;
                this.columnBLOCKNO.MaxLength = 30;
                this.columnDRAWINGNO.MaxLength = 30;
                this.columnPLAN_BLOCK_PRE_START.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnACTUAL_BLOCK_PRE_START.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnACTUAL_BLOCK_PRE_FINISH.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnPLAN_BLOCK_ASS_START.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnPLAN_BLOCK_ASS_FINISH.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnACTUAL_BLOCK_ASS_START.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnACTUAL_BLOCK_ASS_FINISH.DateTimeMode = global::System.Data.DataSetDateTime.Unspecified;
                this.columnPREPAREDBY.MaxLength = 20;
                this.columnREMARK.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRow NewBLOCKCONSTRUCTIONPLAN_TABRow() {
                return ((BLOCKCONSTRUCTIONPLAN_TABRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BLOCKCONSTRUCTIONPLAN_TABRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BLOCKCONSTRUCTIONPLAN_TABRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BLOCKCONSTRUCTIONPLAN_TABRowChanged != null)) {
                    this.BLOCKCONSTRUCTIONPLAN_TABRowChanged(this, new BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent(((BLOCKCONSTRUCTIONPLAN_TABRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BLOCKCONSTRUCTIONPLAN_TABRowChanging != null)) {
                    this.BLOCKCONSTRUCTIONPLAN_TABRowChanging(this, new BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent(((BLOCKCONSTRUCTIONPLAN_TABRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BLOCKCONSTRUCTIONPLAN_TABRowDeleted != null)) {
                    this.BLOCKCONSTRUCTIONPLAN_TABRowDeleted(this, new BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent(((BLOCKCONSTRUCTIONPLAN_TABRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BLOCKCONSTRUCTIONPLAN_TABRowDeleting != null)) {
                    this.BLOCKCONSTRUCTIONPLAN_TABRowDeleting(this, new BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent(((BLOCKCONSTRUCTIONPLAN_TABRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBLOCKCONSTRUCTIONPLAN_TABRow(BLOCKCONSTRUCTIONPLAN_TABRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BlockConstructPlanDs ds = new BlockConstructPlanDs();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BLOCKCONSTRUCTIONPLAN_TABDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BLOCKCONSTRUCTIONPLAN_TABRow : global::System.Data.DataRow {
            
            private BLOCKCONSTRUCTIONPLAN_TABDataTable tableBLOCKCONSTRUCTIONPLAN_TAB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BLOCKCONSTRUCTIONPLAN_TABRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBLOCKCONSTRUCTIONPLAN_TAB = ((BLOCKCONSTRUCTIONPLAN_TABDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    return ((decimal)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.IDColumn]));
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROJECTID {
                get {
                    try {
                        return ((string)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PROJECTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PROJECTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PROJECTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLOCKNO {
                get {
                    try {
                        return ((string)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.BLOCKNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“BLOCKNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.BLOCKNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRAWINGNO {
                get {
                    try {
                        return ((string)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.DRAWINGNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“DRAWINGNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.DRAWINGNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PLAN_BLOCK_PRE_START {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_STARTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PLAN_BLOCK_PRE_START”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_STARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PLAN_BLOCK_PRE_FINISH {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_FINISHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PLAN_BLOCK_PRE_FINISH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_FINISHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ACTUAL_BLOCK_PRE_START {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_STARTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“ACTUAL_BLOCK_PRE_START”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_STARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ACTUAL_BLOCK_PRE_FINISH {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_FINISHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“ACTUAL_BLOCK_PRE_FINISH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_FINISHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PLAN_BLOCK_ASS_START {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_STARTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PLAN_BLOCK_ASS_START”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_STARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PLAN_BLOCK_ASS_FINISH {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_FINISHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PLAN_BLOCK_ASS_FINISH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_FINISHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ACTUAL_BLOCK_ASS_START {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_STARTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“ACTUAL_BLOCK_ASS_START”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_STARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ACTUAL_BLOCK_ASS_FINISH {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_FINISHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“ACTUAL_BLOCK_ASS_FINISH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_FINISHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAREDBY {
                get {
                    try {
                        return ((string)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PREPAREDBY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PREPAREDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“PREPAREDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMARK {
                get {
                    try {
                        return ((string)(this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.REMARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“BLOCKCONSTRUCTIONPLAN_TAB”中列“REMARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.REMARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROJECTIDNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PROJECTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROJECTIDNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PROJECTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLOCKNONull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.BLOCKNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLOCKNONull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.BLOCKNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRAWINGNONull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.DRAWINGNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRAWINGNONull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.DRAWINGNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_BLOCK_PRE_STARTNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_STARTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_BLOCK_PRE_STARTNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_STARTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_BLOCK_PRE_FINISHNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_FINISHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_BLOCK_PRE_FINISHNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_PRE_FINISHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTUAL_BLOCK_PRE_STARTNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_STARTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTUAL_BLOCK_PRE_STARTNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_STARTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTUAL_BLOCK_PRE_FINISHNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_FINISHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTUAL_BLOCK_PRE_FINISHNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_PRE_FINISHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_BLOCK_ASS_STARTNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_STARTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_BLOCK_ASS_STARTNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_STARTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPLAN_BLOCK_ASS_FINISHNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_FINISHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPLAN_BLOCK_ASS_FINISHNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PLAN_BLOCK_ASS_FINISHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTUAL_BLOCK_ASS_STARTNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_STARTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTUAL_BLOCK_ASS_STARTNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_STARTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTUAL_BLOCK_ASS_FINISHNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_FINISHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTUAL_BLOCK_ASS_FINISHNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.ACTUAL_BLOCK_ASS_FINISHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAREDBYNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAREDBYNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAREDATENull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAREDATENull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.PREPAREDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMARKNull() {
                return this.IsNull(this.tableBLOCKCONSTRUCTIONPLAN_TAB.REMARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMARKNull() {
                this[this.tableBLOCKCONSTRUCTIONPLAN_TAB.REMARKColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent : global::System.EventArgs {
            
            private BLOCKCONSTRUCTIONPLAN_TABRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRowChangeEvent(BLOCKCONSTRUCTIONPLAN_TABRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BLOCKCONSTRUCTIONPLAN_TABRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591